
(* Proof of Bellman-Ford algorithm *)

theory SetExt

  use export set.Fset

  function take (s:set 'a) : 'a

  axiom take_def:
    forall x : set 'a, y : 'a.
    y = take x -> mem y x

end

theory Graph

  use export int.Int
  use export SetExt

  type vertex
  constant vertices : set vertex
  constant s : vertex
  function succ vertex : set vertex
  function weight vertex vertex : int

  axiom s_in_graph: mem s vertices

  axiom succ1:
    forall x: vertex. mem x vertices ->
    forall y: vertex. mem y (succ x) -> mem y vertices

(*  axiom nonneg:
    forall x y: vertex. weight x y >= 0
*)

  inductive path (v1 v2: vertex) (n: int) =
    | path_empty:
	forall v: vertex. path v v 0
    | path_succ:
        forall v1 v2 v3: vertex, n: int.
        path v1 v2 n -> mem v3 (succ v2) -> path v1 v3 (n + weight v2 v3)

  predicate shortest_path (v1 v2: vertex) (n: int) =
    (path v1 v2 n) /\
    (forall m: int. m < n -> not (path v1 v2 m))

  predicate no_path (v1 v2: vertex) =
    forall n: int. not (path v1 v2 n)

  inductive reachable (v: vertex) (d: int) =
    | reach_empty:
	reachable s 0
    | reach_succ:
        forall v1 v2: vertex, n: int.
	reachable v1 n -> mem v2 (succ v1) -> reachable v2 (n + 1)

end 

theory Distance

  use import int.Int

  type dist = Finite int | Infinite

  function (++) (x: dist) (y: dist) : dist =
    match x with
      | Infinite -> Infinite
      | Finite x ->
	match y with
	  | Infinite -> Infinite
	  | Finite y -> Finite (x + y)
	end
    end

  predicate (<<) (x y: dist) =
    match x with
      | Infinite -> false
      | Finite x ->
	match y with
	  | Infinite -> true
          | Finite y -> x < y
	end
    end

  predicate ge (x y: dist) =
    match x with
      | Infinite -> true
      | Finite x ->
	match y with
	  | Infinite -> false
	  | Finite y -> x >= y
        end
    end

  clone export comparison.MinMax with type t = dist, predicate ge = ge

end

module BellmanFord

  use import int.MinMax
  use import map.Map
  use import module ref.Ref
  use import Graph
  use import Distance

  type distmap = map vertex dist

  function initialize_single_source (s: vertex) : distmap =
    (const Infinite)[s <- Finite 0]

(*
  let relax (m: distmap) (u: vertex) (v: vertex) : distmap =
    { mem u vertices /\ mem v vertices }
    let new_dv = (get m u) ++ (Finite (weight u v)) in
    if new_dv << (get m v) then (set m v new_dv) else m
    { forall x: vertex. (x <> v -> get m x = get result x) }
*)

  function relax (m: distmap) (u: vertex) (v: vertex) : distmap

  axiom relax_def:
    forall u v: vertex. mem u vertices /\ mem v vertices ->
    forall m m1: distmap. m1 = relax m u v ->
    (forall w: vertex. v <> w -> get m w = get m1 w) /\
    (get m1 v = min (get m v) ((get m u) ++ (Finite (weight u v))))

(*  
    let new_dv = add_dist (get !m u) (Finite (weight u v)) in
    if compare_dist (get !m v) new_dv > 0 then
      let _ = set !m v new_dv in ()
*)

  exception NegativeCycle (* list vertex *)

  let rec relax3 (m: distmap) (u: vertex) (vs: set vertex)
      variant { cardinal vs } =
    { mem u vertices /\ subset vs vertices }
    if cardinal vs <> 0 then
      let v = take vs in
      relax3 (relax m u v) u (remove v vs)
    else
      m
    { }

  let rec relax2 (m: distmap) (us: set vertex)
      variant { cardinal us } =
    if cardinal us <> 0 then
      let u = take us in
      relax2 (relax3 m u (succ u)) (remove u us)
    else
      m

  let rec relax1 (m: distmap) (is: set vertex)
      variant { cardinal is } =
    { 0 <= cardinal is <= cardinal vertices (* /\
      (forall v: vertex.
       reachable v ((cardinal vertices) - (cardinal is)) ->
       shortest_path  *) }
    if cardinal is <> 0 then
      let i = take is in
      relax1 (relax2 m vertices) (remove i is)
    else
      m
    { }


(*
  let rec check_ (m: distmap) (u: vertex) (v: vertex) =
    if (get m v) << ((get m u) ++ (Finite (weight u v))) then
      m
    else raise NegativeCycle

  let rec check2 (m: distmap) (u: vertex) (vs: set vertex)
      variant { cardinal vs } =
    if cardinal vs <> 0 then
      let v = take vs in
      check2 (check_ m u v) u (remove v vs)
    else
      m

  let rec check1 (m: distmap) (us: set vertex)
      variant { cardinal us } =
    if cardinal us <> 0 then
      let u = take us in
      check1 (check2 m u (succ u)) (remove u us)
    else
      m
      *)

  let bellman_ford2 () =
    { true }

    let m = relax1 (initialize_single_source s) vertices in
    m
    (* check1 m (vertices) *)

    { (* the returned map contains the shortest distance from s to any
         reachable vertex *)
      forall v: vertex. mem v vertices ->
        match result[v] with
        | Finite n -> shortest_path s v n
        | Infinite -> no_path s v
        end
    }
(*    | NegativeCycle ->
    { (* there is (at least) one negative cycle *)
      exists v: vertex. mem v vertices /\
      exists n: int. n < 0 /\ path v v n  }
*)


  let bellman_ford () =
    { }
    let m = ref (initialize_single_source s) in

    (let i = ref vertices in
    while cardinal !i > 0 do
      variant { cardinal !i }
      (let x = take !i in i := remove x !i);

      let us = ref vertices in
      while cardinal !us > 0 do
	variant { cardinal !us }
        let u = take !us in us := remove u !us;

	let vs = ref (succ u) in
	while cardinal !vs > 0 do
	  variant { cardinal !vs }
	  let v = take !vs in vs := remove v !vs;

	  m := (relax !m u v)
	done
      done
    done);

    (let us = ref vertices in
    while cardinal !us > 0 do
      variant { cardinal !us }
      let u = take !us in us := remove u !us;
    
      let vs = ref (succ u) in
      while cardinal !vs > 0 do
	variant { cardinal !vs }
        let v = take !vs in vs := remove v !vs;

	if (get !m v) <<
	  ((get !m u) ++ (Finite (weight u v))) then
	  raise NegativeCycle
      done
    done);

    !m

    { (* the returned map contains the shortest distance from s to any
         reachable vertex *)
      forall v: vertex. mem v vertices ->
        match result[v] with
        | Finite n -> shortest_path s v n
        | Infinite -> no_path s v
        end
    }
    | NegativeCycle ->
    { (* there is (at least) one negative cycle *)
      exists v: vertex. mem v vertices /\
      exists n: int. n < 0 /\ path v v n }

end

(*
Local Variables:
compile-command: "why3ide bf.mlw"
End:
*)
